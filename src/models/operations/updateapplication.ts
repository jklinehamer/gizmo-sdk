/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateApplicationRequestBody = {
  loanPurpose?: models.LoanPurpose | undefined;
  crmId?: string | undefined;
  losId?: string | undefined;
  primaryBorrowerDateOfBirth?: string | undefined;
  primaryBorrowerSsn?: string | undefined;
  primaryBorrowerEmail?: string | undefined;
  primaryBorrowerFirstName?: string | undefined;
  primaryBorrowerLastName?: string | undefined;
  primaryBorrowerPhone?: string | undefined;
  status?: models.Milestone | undefined;
  subjectPropertyCity?: string | undefined;
  /**
   * The two-letter state abbreviation in lowercase
   */
  subjectPropertyState?: models.State | undefined;
  subjectPropertyStreetAddress?: string | undefined;
  subjectPropertyZip?: string | undefined;
};

export type UpdateApplicationRequest = {
  id: string;
  requestBody?: UpdateApplicationRequestBody | undefined;
};

/** @internal */
export const UpdateApplicationRequestBody$inboundSchema: z.ZodType<
  UpdateApplicationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  loanPurpose: models.LoanPurpose$inboundSchema.optional(),
  crmId: z.string().optional(),
  losId: z.string().optional(),
  primaryBorrowerDateOfBirth: z.string().optional(),
  primaryBorrowerSsn: z.string().optional(),
  primaryBorrowerEmail: z.string().optional(),
  primaryBorrowerFirstName: z.string().optional(),
  primaryBorrowerLastName: z.string().optional(),
  primaryBorrowerPhone: z.string().optional(),
  status: models.Milestone$inboundSchema.optional(),
  subjectPropertyCity: z.string().optional(),
  subjectPropertyState: models.State$inboundSchema.optional(),
  subjectPropertyStreetAddress: z.string().optional(),
  subjectPropertyZip: z.string().optional(),
});

/** @internal */
export type UpdateApplicationRequestBody$Outbound = {
  loanPurpose?: string | undefined;
  crmId?: string | undefined;
  losId?: string | undefined;
  primaryBorrowerDateOfBirth?: string | undefined;
  primaryBorrowerSsn?: string | undefined;
  primaryBorrowerEmail?: string | undefined;
  primaryBorrowerFirstName?: string | undefined;
  primaryBorrowerLastName?: string | undefined;
  primaryBorrowerPhone?: string | undefined;
  status?: string | undefined;
  subjectPropertyCity?: string | undefined;
  subjectPropertyState?: string | undefined;
  subjectPropertyStreetAddress?: string | undefined;
  subjectPropertyZip?: string | undefined;
};

/** @internal */
export const UpdateApplicationRequestBody$outboundSchema: z.ZodType<
  UpdateApplicationRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateApplicationRequestBody
> = z.object({
  loanPurpose: models.LoanPurpose$outboundSchema.optional(),
  crmId: z.string().optional(),
  losId: z.string().optional(),
  primaryBorrowerDateOfBirth: z.string().optional(),
  primaryBorrowerSsn: z.string().optional(),
  primaryBorrowerEmail: z.string().optional(),
  primaryBorrowerFirstName: z.string().optional(),
  primaryBorrowerLastName: z.string().optional(),
  primaryBorrowerPhone: z.string().optional(),
  status: models.Milestone$outboundSchema.optional(),
  subjectPropertyCity: z.string().optional(),
  subjectPropertyState: models.State$outboundSchema.optional(),
  subjectPropertyStreetAddress: z.string().optional(),
  subjectPropertyZip: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplicationRequestBody$ {
  /** @deprecated use `UpdateApplicationRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateApplicationRequestBody$inboundSchema;
  /** @deprecated use `UpdateApplicationRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateApplicationRequestBody$outboundSchema;
  /** @deprecated use `UpdateApplicationRequestBody$Outbound` instead. */
  export type Outbound = UpdateApplicationRequestBody$Outbound;
}

export function updateApplicationRequestBodyToJSON(
  updateApplicationRequestBody: UpdateApplicationRequestBody,
): string {
  return JSON.stringify(
    UpdateApplicationRequestBody$outboundSchema.parse(
      updateApplicationRequestBody,
    ),
  );
}

export function updateApplicationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplicationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApplicationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplicationRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateApplicationRequest$inboundSchema: z.ZodType<
  UpdateApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateApplicationRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateApplicationRequest$Outbound = {
  id: string;
  RequestBody?: UpdateApplicationRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateApplicationRequest$outboundSchema: z.ZodType<
  UpdateApplicationRequest$Outbound,
  z.ZodTypeDef,
  UpdateApplicationRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateApplicationRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateApplicationRequest$ {
  /** @deprecated use `UpdateApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateApplicationRequest$inboundSchema;
  /** @deprecated use `UpdateApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateApplicationRequest$outboundSchema;
  /** @deprecated use `UpdateApplicationRequest$Outbound` instead. */
  export type Outbound = UpdateApplicationRequest$Outbound;
}

export function updateApplicationRequestToJSON(
  updateApplicationRequest: UpdateApplicationRequest,
): string {
  return JSON.stringify(
    UpdateApplicationRequest$outboundSchema.parse(updateApplicationRequest),
  );
}

export function updateApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateApplicationRequest' from JSON`,
  );
}
