/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateApplicationRequest = {
  primaryBorrowerFirstName: string;
  primaryBorrowerLastName: string;
  primaryBorrowerEmail: string;
  primaryBorrowerPhone: string;
  primaryBorrowerDateOfBirth?: string | undefined;
  primaryBorrowerSsn?: string | undefined;
  /**
   * The two-letter state abbreviation in lowercase
   */
  subjectPropertyState: models.State;
  subjectPropertyStreetAddress?: string | undefined;
  subjectPropertyCity?: string | undefined;
  subjectPropertyZip?: string | undefined;
  loanPurpose?: models.LoanPurpose | undefined;
  losId?: string | undefined;
  crmId?: string | undefined;
  leadProviderSlug: string;
};

/**
 * The created Application ID
 */
export type CreateApplicationResponse = {
  id: string;
};

/** @internal */
export const CreateApplicationRequest$inboundSchema: z.ZodType<
  CreateApplicationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  primaryBorrowerFirstName: z.string(),
  primaryBorrowerLastName: z.string(),
  primaryBorrowerEmail: z.string(),
  primaryBorrowerPhone: z.string(),
  primaryBorrowerDateOfBirth: z.string().optional(),
  primaryBorrowerSsn: z.string().optional(),
  subjectPropertyState: models.State$inboundSchema,
  subjectPropertyStreetAddress: z.string().optional(),
  subjectPropertyCity: z.string().optional(),
  subjectPropertyZip: z.string().optional(),
  loanPurpose: models.LoanPurpose$inboundSchema.optional(),
  losId: z.string().optional(),
  crmId: z.string().optional(),
  leadProviderSlug: z.string(),
});

/** @internal */
export type CreateApplicationRequest$Outbound = {
  primaryBorrowerFirstName: string;
  primaryBorrowerLastName: string;
  primaryBorrowerEmail: string;
  primaryBorrowerPhone: string;
  primaryBorrowerDateOfBirth?: string | undefined;
  primaryBorrowerSsn?: string | undefined;
  subjectPropertyState: string;
  subjectPropertyStreetAddress?: string | undefined;
  subjectPropertyCity?: string | undefined;
  subjectPropertyZip?: string | undefined;
  loanPurpose?: string | undefined;
  losId?: string | undefined;
  crmId?: string | undefined;
  leadProviderSlug: string;
};

/** @internal */
export const CreateApplicationRequest$outboundSchema: z.ZodType<
  CreateApplicationRequest$Outbound,
  z.ZodTypeDef,
  CreateApplicationRequest
> = z.object({
  primaryBorrowerFirstName: z.string(),
  primaryBorrowerLastName: z.string(),
  primaryBorrowerEmail: z.string(),
  primaryBorrowerPhone: z.string(),
  primaryBorrowerDateOfBirth: z.string().optional(),
  primaryBorrowerSsn: z.string().optional(),
  subjectPropertyState: models.State$outboundSchema,
  subjectPropertyStreetAddress: z.string().optional(),
  subjectPropertyCity: z.string().optional(),
  subjectPropertyZip: z.string().optional(),
  loanPurpose: models.LoanPurpose$outboundSchema.optional(),
  losId: z.string().optional(),
  crmId: z.string().optional(),
  leadProviderSlug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationRequest$ {
  /** @deprecated use `CreateApplicationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateApplicationRequest$inboundSchema;
  /** @deprecated use `CreateApplicationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateApplicationRequest$outboundSchema;
  /** @deprecated use `CreateApplicationRequest$Outbound` instead. */
  export type Outbound = CreateApplicationRequest$Outbound;
}

export function createApplicationRequestToJSON(
  createApplicationRequest: CreateApplicationRequest,
): string {
  return JSON.stringify(
    CreateApplicationRequest$outboundSchema.parse(createApplicationRequest),
  );
}

export function createApplicationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplicationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationRequest' from JSON`,
  );
}

/** @internal */
export const CreateApplicationResponse$inboundSchema: z.ZodType<
  CreateApplicationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CreateApplicationResponse$Outbound = {
  id: string;
};

/** @internal */
export const CreateApplicationResponse$outboundSchema: z.ZodType<
  CreateApplicationResponse$Outbound,
  z.ZodTypeDef,
  CreateApplicationResponse
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationResponse$ {
  /** @deprecated use `CreateApplicationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateApplicationResponse$inboundSchema;
  /** @deprecated use `CreateApplicationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateApplicationResponse$outboundSchema;
  /** @deprecated use `CreateApplicationResponse$Outbound` instead. */
  export type Outbound = CreateApplicationResponse$Outbound;
}

export function createApplicationResponseToJSON(
  createApplicationResponse: CreateApplicationResponse,
): string {
  return JSON.stringify(
    CreateApplicationResponse$outboundSchema.parse(createApplicationResponse),
  );
}

export function createApplicationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateApplicationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationResponse' from JSON`,
  );
}
