/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Id = {
  id: string;
};

export const ApplicationPatchStatus = {
  New: "NEW",
  Attempted: "ATTEMPTED",
  Contacted: "CONTACTED",
  CreditPulled: "CREDIT_PULLED",
  PreApproved: "PRE_APPROVED",
  Application: "APPLICATION",
  Processing: "PROCESSING",
  Submittal: "SUBMITTAL",
  Resubmittal: "RESUBMITTAL",
  ConditionallyApproved: "CONDITIONALLY_APPROVED",
  FinalApproved: "FINAL_APPROVED",
  DocsOut: "DOCS_OUT",
  Funded: "FUNDED",
  Purchased: "PURCHASED",
  Completed: "COMPLETED",
  Withdrawn: "WITHDRAWN",
  Denied: "DENIED",
} as const;
export type ApplicationPatchStatus = ClosedEnum<typeof ApplicationPatchStatus>;

export type ApplicationPatch = {
  id: Id;
  status: ApplicationPatchStatus;
};

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z.object({
  id: z.string(),
});

/** @internal */
export type Id$Outbound = {
  id: string;
};

/** @internal */
export const Id$outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id> = z
  .object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
  /** @deprecated use `Id$Outbound` instead. */
  export type Outbound = Id$Outbound;
}

export function idToJSON(id: Id): string {
  return JSON.stringify(Id$outboundSchema.parse(id));
}

export function idFromJSON(
  jsonString: string,
): SafeParseResult<Id, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Id$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Id' from JSON`,
  );
}

/** @internal */
export const ApplicationPatchStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationPatchStatus
> = z.nativeEnum(ApplicationPatchStatus);

/** @internal */
export const ApplicationPatchStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationPatchStatus
> = ApplicationPatchStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationPatchStatus$ {
  /** @deprecated use `ApplicationPatchStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationPatchStatus$inboundSchema;
  /** @deprecated use `ApplicationPatchStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationPatchStatus$outboundSchema;
}

/** @internal */
export const ApplicationPatch$inboundSchema: z.ZodType<
  ApplicationPatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.lazy(() => Id$inboundSchema),
  status: ApplicationPatchStatus$inboundSchema,
});

/** @internal */
export type ApplicationPatch$Outbound = {
  id: Id$Outbound;
  status: string;
};

/** @internal */
export const ApplicationPatch$outboundSchema: z.ZodType<
  ApplicationPatch$Outbound,
  z.ZodTypeDef,
  ApplicationPatch
> = z.object({
  id: z.lazy(() => Id$outboundSchema),
  status: ApplicationPatchStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationPatch$ {
  /** @deprecated use `ApplicationPatch$inboundSchema` instead. */
  export const inboundSchema = ApplicationPatch$inboundSchema;
  /** @deprecated use `ApplicationPatch$outboundSchema` instead. */
  export const outboundSchema = ApplicationPatch$outboundSchema;
  /** @deprecated use `ApplicationPatch$Outbound` instead. */
  export type Outbound = ApplicationPatch$Outbound;
}

export function applicationPatchToJSON(
  applicationPatch: ApplicationPatch,
): string {
  return JSON.stringify(
    ApplicationPatch$outboundSchema.parse(applicationPatch),
  );
}

export function applicationPatchFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationPatch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationPatch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationPatch' from JSON`,
  );
}
