/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LoanPurpose,
  LoanPurpose$inboundSchema,
  LoanPurpose$outboundSchema,
} from "./loanpurpose.js";
import {
  Milestone,
  Milestone$inboundSchema,
  Milestone$outboundSchema,
} from "./milestone.js";
import { State, State$inboundSchema, State$outboundSchema } from "./state.js";

/**
 * The Application object
 */
export type Application = {
  id: string;
  orgId: string;
  createdAt: number;
  updatedAt?: number | undefined;
  status: Milestone;
  primaryBorrowerFirstName: string;
  primaryBorrowerLastName: string;
  primaryBorrowerEmail: string;
  primaryBorrowerPhone: string;
  primaryBorrowerDateOfBirth?: string | undefined;
  primaryBorrowerSsn?: string | undefined;
  /**
   * The two-letter state abbreviation in lowercase
   */
  subjectPropertyState: State;
  subjectPropertyStreetAddress?: string | undefined;
  subjectPropertyCity?: string | undefined;
  subjectPropertyZip?: string | undefined;
  loanPurpose?: LoanPurpose | undefined;
  losId?: string | undefined;
  crmId?: string | undefined;
  leadProviderSlug: string;
};

/** @internal */
export const Application$inboundSchema: z.ZodType<
  Application,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  orgId: z.string(),
  createdAt: z.number(),
  updatedAt: z.number().optional(),
  status: Milestone$inboundSchema,
  primaryBorrowerFirstName: z.string(),
  primaryBorrowerLastName: z.string(),
  primaryBorrowerEmail: z.string(),
  primaryBorrowerPhone: z.string(),
  primaryBorrowerDateOfBirth: z.string().optional(),
  primaryBorrowerSsn: z.string().optional(),
  subjectPropertyState: State$inboundSchema,
  subjectPropertyStreetAddress: z.string().optional(),
  subjectPropertyCity: z.string().optional(),
  subjectPropertyZip: z.string().optional(),
  loanPurpose: LoanPurpose$inboundSchema.optional(),
  losId: z.string().optional(),
  crmId: z.string().optional(),
  leadProviderSlug: z.string(),
});

/** @internal */
export type Application$Outbound = {
  id: string;
  orgId: string;
  createdAt: number;
  updatedAt?: number | undefined;
  status: string;
  primaryBorrowerFirstName: string;
  primaryBorrowerLastName: string;
  primaryBorrowerEmail: string;
  primaryBorrowerPhone: string;
  primaryBorrowerDateOfBirth?: string | undefined;
  primaryBorrowerSsn?: string | undefined;
  subjectPropertyState: string;
  subjectPropertyStreetAddress?: string | undefined;
  subjectPropertyCity?: string | undefined;
  subjectPropertyZip?: string | undefined;
  loanPurpose?: string | undefined;
  losId?: string | undefined;
  crmId?: string | undefined;
  leadProviderSlug: string;
};

/** @internal */
export const Application$outboundSchema: z.ZodType<
  Application$Outbound,
  z.ZodTypeDef,
  Application
> = z.object({
  id: z.string(),
  orgId: z.string(),
  createdAt: z.number(),
  updatedAt: z.number().optional(),
  status: Milestone$outboundSchema,
  primaryBorrowerFirstName: z.string(),
  primaryBorrowerLastName: z.string(),
  primaryBorrowerEmail: z.string(),
  primaryBorrowerPhone: z.string(),
  primaryBorrowerDateOfBirth: z.string().optional(),
  primaryBorrowerSsn: z.string().optional(),
  subjectPropertyState: State$outboundSchema,
  subjectPropertyStreetAddress: z.string().optional(),
  subjectPropertyCity: z.string().optional(),
  subjectPropertyZip: z.string().optional(),
  loanPurpose: LoanPurpose$outboundSchema.optional(),
  losId: z.string().optional(),
  crmId: z.string().optional(),
  leadProviderSlug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Application$ {
  /** @deprecated use `Application$inboundSchema` instead. */
  export const inboundSchema = Application$inboundSchema;
  /** @deprecated use `Application$outboundSchema` instead. */
  export const outboundSchema = Application$outboundSchema;
  /** @deprecated use `Application$Outbound` instead. */
  export type Outbound = Application$Outbound;
}

export function applicationToJSON(application: Application): string {
  return JSON.stringify(Application$outboundSchema.parse(application));
}

export function applicationFromJSON(
  jsonString: string,
): SafeParseResult<Application, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Application$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Application' from JSON`,
  );
}
