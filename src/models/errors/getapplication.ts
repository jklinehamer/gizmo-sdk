/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { GizmoError } from "./gizmoerror.js";

/**
 * Invalid id error
 */
export type UnprocessableEntityErrorData = {
  success: boolean;
  error: operations.ErrorT;
};

/**
 * Invalid id error
 */
export class UnprocessableEntityError extends GizmoError {
  success: boolean;
  error: operations.ErrorT;

  /** The original data that was passed to this error instance. */
  data$: UnprocessableEntityErrorData;

  constructor(
    err: UnprocessableEntityErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.success = err.success;
    this.error = err.error;

    this.name = "UnprocessableEntityError";
  }
}

/**
 * Application not found
 */
export type NotFoundErrorData = {
  message: string;
};

/**
 * Application not found
 */
export class NotFoundError extends GizmoError {
  /** The original data that was passed to this error instance. */
  data$: NotFoundErrorData;

  constructor(
    err: NotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "NotFoundError";
  }
}

/** @internal */
export const UnprocessableEntityError$inboundSchema: z.ZodType<
  UnprocessableEntityError,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  error: z.lazy(() => operations.ErrorT$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new UnprocessableEntityError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UnprocessableEntityError$Outbound = {
  success: boolean;
  error: operations.ErrorT$Outbound;
};

/** @internal */
export const UnprocessableEntityError$outboundSchema: z.ZodType<
  UnprocessableEntityError$Outbound,
  z.ZodTypeDef,
  UnprocessableEntityError
> = z.instanceof(UnprocessableEntityError)
  .transform(v => v.data$)
  .pipe(z.object({
    success: z.boolean(),
    error: z.lazy(() => operations.ErrorT$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityError$ {
  /** @deprecated use `UnprocessableEntityError$inboundSchema` instead. */
  export const inboundSchema = UnprocessableEntityError$inboundSchema;
  /** @deprecated use `UnprocessableEntityError$outboundSchema` instead. */
  export const outboundSchema = UnprocessableEntityError$outboundSchema;
  /** @deprecated use `UnprocessableEntityError$Outbound` instead. */
  export type Outbound = UnprocessableEntityError$Outbound;
}

/** @internal */
export const NotFoundError$inboundSchema: z.ZodType<
  NotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new NotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type NotFoundError$Outbound = {
  message: string;
};

/** @internal */
export const NotFoundError$outboundSchema: z.ZodType<
  NotFoundError$Outbound,
  z.ZodTypeDef,
  NotFoundError
> = z.instanceof(NotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundError$ {
  /** @deprecated use `NotFoundError$inboundSchema` instead. */
  export const inboundSchema = NotFoundError$inboundSchema;
  /** @deprecated use `NotFoundError$outboundSchema` instead. */
  export const outboundSchema = NotFoundError$outboundSchema;
  /** @deprecated use `NotFoundError$Outbound` instead. */
  export type Outbound = NotFoundError$Outbound;
}
