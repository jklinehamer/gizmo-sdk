/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ApplicationSelectStatus = {
  New: "NEW",
  Attempted: "ATTEMPTED",
  Contacted: "CONTACTED",
  CreditPulled: "CREDIT_PULLED",
  PreApproved: "PRE_APPROVED",
  Application: "APPLICATION",
  Processing: "PROCESSING",
  Submittal: "SUBMITTAL",
  Resubmittal: "RESUBMITTAL",
  ConditionallyApproved: "CONDITIONALLY_APPROVED",
  FinalApproved: "FINAL_APPROVED",
  DocsOut: "DOCS_OUT",
  Funded: "FUNDED",
  Purchased: "PURCHASED",
  Completed: "COMPLETED",
  Withdrawn: "WITHDRAWN",
  Denied: "DENIED",
} as const;
export type ApplicationSelectStatus = ClosedEnum<
  typeof ApplicationSelectStatus
>;

export type ApplicationSelect = {
  id: string;
  createdAt: number;
  updatedAt?: number | undefined;
  losId?: string | undefined;
  crmId?: string | undefined;
  losApplicationId?: string | undefined;
  assignedUserId?: string | undefined;
  subjectPropertyId?: string | undefined;
  status: ApplicationSelectStatus;
  nextAppointmentAt?: number | undefined;
  /**
   * Example: "America/New_York
   */
  timezone: string;
  timezoneOffset?: number | undefined;
  primaryBorrowerId: string;
};

/** @internal */
export const ApplicationSelectStatus$inboundSchema: z.ZodNativeEnum<
  typeof ApplicationSelectStatus
> = z.nativeEnum(ApplicationSelectStatus);

/** @internal */
export const ApplicationSelectStatus$outboundSchema: z.ZodNativeEnum<
  typeof ApplicationSelectStatus
> = ApplicationSelectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSelectStatus$ {
  /** @deprecated use `ApplicationSelectStatus$inboundSchema` instead. */
  export const inboundSchema = ApplicationSelectStatus$inboundSchema;
  /** @deprecated use `ApplicationSelectStatus$outboundSchema` instead. */
  export const outboundSchema = ApplicationSelectStatus$outboundSchema;
}

/** @internal */
export const ApplicationSelect$inboundSchema: z.ZodType<
  ApplicationSelect,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.number(),
  updatedAt: z.number().optional(),
  losId: z.string().optional(),
  crmId: z.string().optional(),
  losApplicationId: z.string().optional(),
  assignedUserId: z.string().optional(),
  subjectPropertyId: z.string().optional(),
  status: ApplicationSelectStatus$inboundSchema,
  nextAppointmentAt: z.number().optional(),
  timezone: z.string(),
  timezoneOffset: z.number().optional(),
  primaryBorrowerId: z.string(),
});

/** @internal */
export type ApplicationSelect$Outbound = {
  id: string;
  createdAt: number;
  updatedAt?: number | undefined;
  losId?: string | undefined;
  crmId?: string | undefined;
  losApplicationId?: string | undefined;
  assignedUserId?: string | undefined;
  subjectPropertyId?: string | undefined;
  status: string;
  nextAppointmentAt?: number | undefined;
  timezone: string;
  timezoneOffset?: number | undefined;
  primaryBorrowerId: string;
};

/** @internal */
export const ApplicationSelect$outboundSchema: z.ZodType<
  ApplicationSelect$Outbound,
  z.ZodTypeDef,
  ApplicationSelect
> = z.object({
  id: z.string(),
  createdAt: z.number(),
  updatedAt: z.number().optional(),
  losId: z.string().optional(),
  crmId: z.string().optional(),
  losApplicationId: z.string().optional(),
  assignedUserId: z.string().optional(),
  subjectPropertyId: z.string().optional(),
  status: ApplicationSelectStatus$outboundSchema,
  nextAppointmentAt: z.number().optional(),
  timezone: z.string(),
  timezoneOffset: z.number().optional(),
  primaryBorrowerId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationSelect$ {
  /** @deprecated use `ApplicationSelect$inboundSchema` instead. */
  export const inboundSchema = ApplicationSelect$inboundSchema;
  /** @deprecated use `ApplicationSelect$outboundSchema` instead. */
  export const outboundSchema = ApplicationSelect$outboundSchema;
  /** @deprecated use `ApplicationSelect$Outbound` instead. */
  export type Outbound = ApplicationSelect$Outbound;
}

export function applicationSelectToJSON(
  applicationSelect: ApplicationSelect,
): string {
  return JSON.stringify(
    ApplicationSelect$outboundSchema.parse(applicationSelect),
  );
}

export function applicationSelectFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationSelect, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationSelect$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationSelect' from JSON`,
  );
}
