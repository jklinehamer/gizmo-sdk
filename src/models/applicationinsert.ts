/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const State = {
  Al: "al",
  Ak: "ak",
  Az: "az",
  Ar: "ar",
  Ca: "ca",
  Co: "co",
  Ct: "ct",
  De: "de",
  Dc: "dc",
  Fl: "fl",
  Ga: "ga",
  Hi: "hi",
  Id: "id",
  Il: "il",
  In: "in",
  Ia: "ia",
  Ks: "ks",
  Ky: "ky",
  La: "la",
  Me: "me",
  Md: "md",
  Ma: "ma",
  Mi: "mi",
  Mn: "mn",
  Ms: "ms",
  Mo: "mo",
  Mt: "mt",
  Ne: "ne",
  Nv: "nv",
  Nh: "nh",
  Nj: "nj",
  Nm: "nm",
  Ny: "ny",
  Nc: "nc",
  Nd: "nd",
  Oh: "oh",
  Ok: "ok",
  Or: "or",
  Pa: "pa",
  Ri: "ri",
  Sc: "sc",
  Sd: "sd",
  Tn: "tn",
  Tx: "tx",
  Ut: "ut",
  Vt: "vt",
  Va: "va",
  Wa: "wa",
  Wv: "wv",
  Wi: "wi",
  Wy: "wy",
} as const;
export type State = ClosedEnum<typeof State>;

export type ApplicationInsert = {
  crmId?: string | undefined;
  firstName: string;
  lastName: string;
  email?: string | undefined;
  phone: string;
  streetAddress?: string | undefined;
  city?: string | undefined;
  state: State;
  zip?: string | undefined;
  leadProviderSlug: string;
  orgId: string;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const ApplicationInsert$inboundSchema: z.ZodType<
  ApplicationInsert,
  z.ZodTypeDef,
  unknown
> = z.object({
  crmId: z.string().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional(),
  phone: z.string(),
  streetAddress: z.string().optional(),
  city: z.string().optional(),
  state: State$inboundSchema,
  zip: z.string().optional(),
  leadProviderSlug: z.string(),
  orgId: z.string(),
});

/** @internal */
export type ApplicationInsert$Outbound = {
  crmId?: string | undefined;
  firstName: string;
  lastName: string;
  email?: string | undefined;
  phone: string;
  streetAddress?: string | undefined;
  city?: string | undefined;
  state: string;
  zip?: string | undefined;
  leadProviderSlug: string;
  orgId: string;
};

/** @internal */
export const ApplicationInsert$outboundSchema: z.ZodType<
  ApplicationInsert$Outbound,
  z.ZodTypeDef,
  ApplicationInsert
> = z.object({
  crmId: z.string().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional(),
  phone: z.string(),
  streetAddress: z.string().optional(),
  city: z.string().optional(),
  state: State$outboundSchema,
  zip: z.string().optional(),
  leadProviderSlug: z.string(),
  orgId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationInsert$ {
  /** @deprecated use `ApplicationInsert$inboundSchema` instead. */
  export const inboundSchema = ApplicationInsert$inboundSchema;
  /** @deprecated use `ApplicationInsert$outboundSchema` instead. */
  export const outboundSchema = ApplicationInsert$outboundSchema;
  /** @deprecated use `ApplicationInsert$Outbound` instead. */
  export type Outbound = ApplicationInsert$Outbound;
}

export function applicationInsertToJSON(
  applicationInsert: ApplicationInsert,
): string {
  return JSON.stringify(
    ApplicationInsert$outboundSchema.parse(applicationInsert),
  );
}

export function applicationInsertFromJSON(
  jsonString: string,
): SafeParseResult<ApplicationInsert, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicationInsert$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicationInsert' from JSON`,
  );
}
